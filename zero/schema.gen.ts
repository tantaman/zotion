/* eslint-disable */
/* tslint:disable */
// noinspection JSUnusedGlobalSymbols
// biome-ignore-all
/*
 * ------------------------------------------------------------
 * ## This file was automatically generated by drizzle-zero. ##
 * ## Any changes you make to this file will be overwritten. ##
 * ##                                                        ##
 * ## Additionally, you should also exclude this file from   ##
 * ## your linter and/or formatter to prevent it from being  ##
 * ## checked or modified.                                   ##
 * ##                                                        ##
 * ## SOURCE: https://github.com/0xcadams/drizzle-zero        ##
 * ------------------------------------------------------------
 */

import type { DrizzleToZeroSchema, ZeroCustomType } from "drizzle-zero";
import type * as drizzleSchema from "../server/db/schema";

type ZeroSchema = DrizzleToZeroSchema<typeof drizzleSchema>;

/**
 * The Zero schema object.
 * This type is auto-generated from your Drizzle schema definition.
 */
export const schema = {
  tables: {
    document: {
      name: "document",
      columns: {
        id: {
          type: "string",
          optional: false,
          customType: null as unknown as ZeroCustomType<
            ZeroSchema,
            "document",
            "id"
          >,
        },
        ownerId: {
          type: "string",
          optional: false,
          customType: null as unknown as ZeroCustomType<
            ZeroSchema,
            "document",
            "ownerId"
          >,
          serverName: "owner_id",
        },
        workspaceId: {
          type: "string",
          optional: false,
          customType: null as unknown as ZeroCustomType<
            ZeroSchema,
            "document",
            "workspaceId"
          >,
          serverName: "workspace_id",
        },
        visibility: {
          type: "string",
          optional: false,
          customType: null as unknown as ZeroCustomType<
            ZeroSchema,
            "document",
            "visibility"
          >,
        },
        title: {
          type: "string",
          optional: false,
          customType: null as unknown as ZeroCustomType<
            ZeroSchema,
            "document",
            "title"
          >,
        },
        created: {
          type: "number",
          optional: true,
          customType: null as unknown as ZeroCustomType<
            ZeroSchema,
            "document",
            "created"
          >,
        },
        modified: {
          type: "number",
          optional: true,
          customType: null as unknown as ZeroCustomType<
            ZeroSchema,
            "document",
            "modified"
          >,
        },
        emoji: {
          type: "string",
          optional: true,
          customType: null as unknown as ZeroCustomType<
            ZeroSchema,
            "document",
            "emoji"
          >,
        },
      },
      primaryKey: ["id"],
    },
    documentBody: {
      name: "documentBody",
      columns: {
        documentId: {
          type: "string",
          optional: false,
          customType: null as unknown as ZeroCustomType<
            ZeroSchema,
            "documentBody",
            "documentId"
          >,
          serverName: "document_id",
        },
        content: {
          type: "string",
          optional: false,
          customType: null as unknown as ZeroCustomType<
            ZeroSchema,
            "documentBody",
            "content"
          >,
        },
      },
      primaryKey: ["documentId"],
      serverName: "document_body",
    },
    user: {
      name: "user",
      columns: {
        id: {
          type: "string",
          optional: false,
          customType: null as unknown as ZeroCustomType<
            ZeroSchema,
            "user",
            "id"
          >,
        },
        name: {
          type: "string",
          optional: false,
          customType: null as unknown as ZeroCustomType<
            ZeroSchema,
            "user",
            "name"
          >,
        },
        email: {
          type: "string",
          optional: false,
          customType: null as unknown as ZeroCustomType<
            ZeroSchema,
            "user",
            "email"
          >,
        },
        emoji: {
          type: "string",
          optional: false,
          customType: null as unknown as ZeroCustomType<
            ZeroSchema,
            "user",
            "emoji"
          >,
        },
        avatarUrl: {
          type: "string",
          optional: true,
          customType: null as unknown as ZeroCustomType<
            ZeroSchema,
            "user",
            "avatarUrl"
          >,
          serverName: "avatar_url",
        },
      },
      primaryKey: ["id"],
    },
    workspace: {
      name: "workspace",
      columns: {
        id: {
          type: "string",
          optional: false,
          customType: null as unknown as ZeroCustomType<
            ZeroSchema,
            "workspace",
            "id"
          >,
        },
        name: {
          type: "string",
          optional: false,
          customType: null as unknown as ZeroCustomType<
            ZeroSchema,
            "workspace",
            "name"
          >,
        },
      },
      primaryKey: ["id"],
    },
    workspaceMember: {
      name: "workspaceMember",
      columns: {
        workspaceId: {
          type: "string",
          optional: false,
          customType: null as unknown as ZeroCustomType<
            ZeroSchema,
            "workspaceMember",
            "workspaceId"
          >,
          serverName: "workspace_id",
        },
        userId: {
          type: "string",
          optional: false,
          customType: null as unknown as ZeroCustomType<
            ZeroSchema,
            "workspaceMember",
            "userId"
          >,
          serverName: "user_id",
        },
      },
      primaryKey: ["workspaceId", "userId"],
      serverName: "workspace_member",
    },
  },
  relationships: {
    documentBody: {
      document: [
        {
          sourceField: ["documentId"],
          destField: ["id"],
          destSchema: "document",
          cardinality: "one",
        },
      ],
    },
    document: {
      workspace: [
        {
          sourceField: ["workspaceId"],
          destField: ["id"],
          destSchema: "workspace",
          cardinality: "one",
        },
      ],
      body: [
        {
          sourceField: ["id"],
          destField: ["documentId"],
          destSchema: "documentBody",
          cardinality: "one",
        },
      ],
    },
    user: {
      workspaceMemberships: [
        {
          sourceField: ["id"],
          destField: ["userId"],
          destSchema: "workspaceMember",
          cardinality: "many",
        },
      ],
    },
    workspaceMember: {
      workspace: [
        {
          sourceField: ["workspaceId"],
          destField: ["id"],
          destSchema: "workspace",
          cardinality: "one",
        },
      ],
      user: [
        {
          sourceField: ["userId"],
          destField: ["id"],
          destSchema: "user",
          cardinality: "one",
        },
      ],
    },
    workspace: {
      documents: [
        {
          sourceField: ["id"],
          destField: ["workspaceId"],
          destSchema: "document",
          cardinality: "many",
        },
      ],
      members: [
        {
          sourceField: ["id"],
          destField: ["workspaceId"],
          destSchema: "workspaceMember",
          cardinality: "many",
        },
      ],
    },
  },
} as const;

/**
 * Represents the Zero schema type.
 * This type is auto-generated from your Drizzle schema definition.
 */
export type Schema = typeof schema;
